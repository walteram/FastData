// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FastData
{
    using FastData.Configuration;
    using FastData.Utils;
    using System.Linq;
    using System.Text;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class TableMapTemplate : TableMapTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
    
Type type = this.Type;
string className = this.ClassName;
string namespaceName = this.NamespaceName;
var mappedProperties = FastDataOptions.Instance.TypeInfoLoader.GetMappedProperties(type).Select(it => new { ColumnName = FastDataOptions.Instance.TypeInfoLoader.GetColumnName(it), Property = it }).Where(it => !string.IsNullOrEmpty(it.ColumnName)).ToArray();
var tableName = FastDataOptions.Instance.TypeInfoLoader.GetTableName(type);
var primaryKeyName = FastDataOptions.Instance.TypeInfoLoader.GetPrimaryKeyName(type);
var uniqueKeyNames = FastDataOptions.Instance.TypeInfoLoader.GetUniqueKeyNames(type).Select(it => FastDataOptions.Instance.TypeInfoLoader.GetColumnName(it)).Where(it => !string.IsNullOrEmpty(it)).ToArray();
var uniqueKeyProperties = FastDataOptions.Instance.TypeInfoLoader.GetUniqueKeyNames(type);
var uniqueKeyColumnNames = uniqueKeyProperties.Select(it => it.Name).ToArray();
var uniqueKeyExpression = "";
for (var i = 0; i < uniqueKeyProperties.Length; i++)
{
    if (i > 0)
    {
        uniqueKeyExpression += " AND ";
    }
    var columnName = FastDataOptions.Instance.TypeInfoLoader.GetColumnName(uniqueKeyProperties[i]);
    var paramName = FastDataOptions.Instance.ParameterSqlPrefix + columnName;
    if (FastDataOptions.Instance.TypeInfoLoader.CanBeNull(uniqueKeyProperties[i]))
    {
        uniqueKeyExpression += "((" + paramName + " " + FastDataOptions.Instance.IsNullExpression + " AND " + columnName + " " + FastDataOptions.Instance.IsNullExpression + ") OR " + columnName + "=" + paramName + ")";        
    }
    else 
    {
        uniqueKeyExpression += columnName + "=" + paramName;
    }                                
}

var first = true;

            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Data.Common;\r\nusing FastData.Configuration;\r\nusing Sy" +
                    "stem.Linq;\r\n\r\nnamespace ");
            
            #line 42 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public sealed class ");
            
            #line 44 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" : TableMap<");
            
            #line 44 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\t\t\r\n        public override ");
            
            #line 46 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" CreateObject(DbDataReader dataReader)\r\n        {\r\n            var obj = new ");
            
            #line 48 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write("();\r\n            ");
            
            #line 49 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            foreach (var item in mappedProperties)
            {
                if (item.Property.PropertyType.IsGenericType && item.Property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    
            
            #line default
            #line hidden
            this.Write("                    if(dataReader[\"");
            
            #line 55 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"] == DBNull.Value || dataReader[\"");
            
            #line 55 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"] == null)\r\n                    {\r\n                        obj.");
            
            #line 57 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(" = null;\r\n                    }\r\n                    else\r\n                    {\r" +
                    "\n                        obj.");
            
            #line 61 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 61 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringUtils.GetTypeConverter(item.Property.PropertyType.GetGenericArguments()[0])));
            
            #line default
            #line hidden
            this.Write("(dataReader[\"");
            
            #line 61 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"]));\r\n                    }\r\n                    ");
            
            #line 63 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
                    
                }
                else if (item.Property.PropertyType == typeof(string))
                {
                    
            
            #line default
            #line hidden
            this.Write("                    if(dataReader[\"");
            
            #line 68 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"] == DBNull.Value || dataReader[\"");
            
            #line 68 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"] == null)\r\n                    {\r\n                        obj.");
            
            #line 70 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(" = null;\r\n                    }\r\n                    else\r\n                    {\r" +
                    "\n                        obj.");
            
            #line 74 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(" = (string)dataReader[\"");
            
            #line 74 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"];\r\n                    }\r\n                    ");
            
            #line 76 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
                    
                }
                else
                {
                    
            
            #line default
            #line hidden
            this.Write("obj.");
            
            #line 80 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 80 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StringUtils.GetTypeConverter(item.Property.PropertyType)));
            
            #line default
            #line hidden
            this.Write("(dataReader[\"");
            
            #line 80 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"]));");
            
            #line 80 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }                
            }
            
            
            #line default
            #line hidden
            this.Write("            return obj;\r\n        }\r\n\r\n        protected override void CreateUpdat" +
                    "eCommand(");
            
            #line 87 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" obj, ref DbCommand command)\r\n        {\r\n            command.CommandText = Update" +
                    "CommandText;\r\n            ");
            
            #line 90 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            foreach (var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                
            
            #line default
            #line hidden
            this.Write("CreateParameter(\"");
            
            #line 97 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", obj.");
            
            #line 97 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(", ref command);");
            
            #line 97 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            }
            
            
            #line default
            #line hidden
            this.Write("        }\r\n        \r\n        protected override void CreateUpdateCommand(");
            
            #line 102 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" obj, ref DbCommand command, string[] changedProperties, string[] incrementProper" +
                    "ties)\r\n        {\r\n            command.CommandText = \"UPDATE ");
            
            #line 104 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" SET \";\r\n            ");
            
            #line 105 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            foreach (var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                
            
            #line default
            #line hidden
            this.Write("                if(changedProperties != null && changedProperties.Contains(\"");
            
            #line 113 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write("\")) command.CommandText += CreateParameter(\"");
            
            #line 113 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", obj.");
            
            #line 113 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(", ref command) + \", \";\r\n                ");
            
            #line 114 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                if(item.Property.PropertyType != typeof(string) && item.Property.PropertyType != typeof(byte[]))
                {
                    
            
            #line default
            #line hidden
            this.Write("if(incrementProperties != null && incrementProperties.Contains(\"");
            
            #line 117 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write("\")) command.CommandText += \"");
            
            #line 117 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("=");
            
            #line 117 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("+1, \";\r\n            ");
            
            #line 118 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }            
            }
          
            
            #line default
            #line hidden
            this.Write("command.CommandText = command.CommandText.TrimEnd(\' \', \',\') + \" WHERE \";\r\n       " +
                    " }\r\n\r\n        protected override void CreateInsertCommand(");
            
            #line 124 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" obj, ref DbCommand command)\r\n        {\r\n            command.CommandText = Insert" +
                    "CommandText;\r\n            ");
            
            #line 127 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            foreach (var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                
            
            #line default
            #line hidden
            this.Write("CreateParameter(\"");
            
            #line 134 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", obj.");
            
            #line 134 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(", ref command);");
            
            #line 134 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            }
            
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public override void CreateTryInsertCommand(");
            
            #line 139 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" obj, ref DbCommand command)\r\n        {\r\n            command.CommandText = TryIns" +
                    "ertCommandText;\r\n            ");
            
            #line 142 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            foreach (var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                
            
            #line default
            #line hidden
            this.Write("                command.Parameters.Add(CreateParameterWithFullName(\"");
            
            #line 150 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.ParameterNamePrefix + item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", obj.");
            
            #line 150 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(", command));");
            
            #line 150 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            }
            
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public override void UpdateTryInsertCommand(");
            
            #line 155 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" obj, ref DbCommand command)\r\n        {\r\n            ");
            
            #line 157 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            foreach (var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                if (FastDataOptions.Instance.TypeInfoLoader.CanBeNull(item.Property))
                { 
                    
            
            #line default
            #line hidden
            this.Write("if(obj.");
            
            #line 166 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(" != null) {command.Parameters[\"");
            
            #line 166 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.ParameterNamePrefix + item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"].Value = obj.");
            
            #line 166 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write("; } else { command.Parameters[\"");
            
            #line 166 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.ParameterNamePrefix + item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"].Value = DBNull.Value; }");
            
            #line 166 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }
                else
                {
                    
            
            #line default
            #line hidden
            this.Write("command.Parameters[\"");
            
            #line 170 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.ParameterNamePrefix + item.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"].Value = obj.");
            
            #line 170 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Property.Name));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 170 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
           
                }
            }
            
            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n        public override object[] GetUniqueKeyValues(");
            
            #line 176 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" obj)\r\n        {\r\n            return new object[]{\r\n            ");
            
            #line 179 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            first = true;
            foreach (var item in uniqueKeyColumnNames)
            {
                if (!first)
                {
                    
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 185 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
                    
                }
                
            
            #line default
            #line hidden
            this.Write("obj.");
            
            #line 187 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item));
            
            #line default
            #line hidden
            
            #line 187 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                first = false;
            }
            
            
            #line default
            #line hidden
            this.Write("};\r\n        }\r\n\r\n        protected override string SelectCommandText \r\n        { " +
                    "\r\n            get { return \"SELECT ");
            
            #line 195 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            for (var i = 0; i < mappedProperties.Length; i++)
            {
                if (i > 0)
                {
                    
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 200 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }
                
            
            #line default
            #line hidden
            
            #line 202 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mappedProperties[i].ColumnName));
            
            #line default
            #line hidden
            
            #line 202 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

             }
             
            
            #line default
            #line hidden
            this.Write(" FROM ");
            
            #line 204 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n\t\tprotected override string SelectTopNCommandText \r\n        { " +
                    "\t\t\t\r\n            get { return \"SELECT {0} ");
            
            #line 209 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            for (var i = 0; i < mappedProperties.Length; i++)
            {
                if (i > 0)
                {
                    
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 214 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }
                
            
            #line default
            #line hidden
            
            #line 216 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(mappedProperties[i].ColumnName));
            
            #line default
            #line hidden
            
            #line 216 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

             }
             
            
            #line default
            #line hidden
            this.Write(" FROM ");
            
            #line 218 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" ORDER BY ");
            
            #line 218 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyName));
            
            #line default
            #line hidden
            this.Write(" {1}\"; }\r\n        }\r\n            \r\n        protected override string UpdateComman" +
                    "dText \r\n        { \r\n            get { return \"UPDATE ");
            
            #line 223 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" SET ");
            
            #line 223 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            first = true;
            foreach(var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                if (!first)
                {
                    
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 233 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }
                
            
            #line default
            #line hidden
            
            #line 235 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ColumnName + "=" + FastDataOptions.Instance.ParameterSqlPrefix + item.ColumnName));
            
            #line default
            #line hidden
            
            #line 235 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                first = false;
            }
           
            
            #line default
            #line hidden
            this.Write(" WHERE \"; }\r\n        }\r\n\r\n        protected override string DeleteCommandText \r\n " +
                    "       {             \r\n            get { return \"DELETE FROM ");
            
            #line 243 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" WHERE \"; }\r\n        }\r\n\r\n\t\tprotected override string TruncateCommandText \r\n     " +
                    "   {             \r\n            get { return \"TRUNCATE TABLE ");
            
            #line 248 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n    \r\n        protected override string InsertCommandText\r\n     " +
                    "   { \r\n            get { return \"");
            
            #line 253 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            var insertCommandText = new StringBuilder(512);
            insertCommandText.Append("INSERT INTO " + tableName + "(");
            first = true;
            foreach(var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                if (!first)
                {
                    insertCommandText.Append(", ");
                }
                insertCommandText.Append(item.ColumnName);
                first = false;
            }
            insertCommandText.Append(") VALUES (");
            first = true;
            foreach(var item in mappedProperties)
            {
                if (item.ColumnName == primaryKeyName)
                {
                    continue;
                }
                if (!first)
                {
                    insertCommandText.Append(", ");
                }
                insertCommandText.Append(FastDataOptions.Instance.ParameterSqlPrefix + item.ColumnName);
                first = false;
            }
            insertCommandText.Append(")");
            
            
            #line default
            #line hidden
            
            #line 286 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(insertCommandText.ToString()));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n        protected override string TryInsertCommandText\r\n      " +
                    "  { \r\n            get { return \"");
            
            #line 291 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.BeginTryExpression + " " + insertCommandText.ToString() + "; " + FastDataOptions.Instance.EndTryExpression));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n        protected override string GetLastIdCommandText\r\n      " +
                    "  { \r\n            get { return \"SELECT {1} {0} FROM ");
            
            #line 296 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" ORDER BY {0} DESC {2}\"; }\r\n        }\r\n\r\n        protected override string Primar" +
                    "yKeyName \r\n        { \r\n            get { return \"");
            
            #line 301 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyName));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n        protected override string SelectFieldCommandText \r\n   " +
                    "     { \r\n            get { return \"SELECT {1} {0} FROM ");
            
            #line 306 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 306 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uniqueKeyExpression));
            
            #line default
            #line hidden
            this.Write(" {2}\"; }\r\n         }\r\n\r\n        protected override string SelectCreationDateComma" +
                    "ndText \r\n        { \r\n            get { return \"SELECT ");
            
            #line 311 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.GetTop(1)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 311 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.TypeInfoLoader.GetCreationDateColumnName(type)));
            
            #line default
            #line hidden
            this.Write(" FROM ");
            
            #line 311 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 311 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uniqueKeyExpression));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 311 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.GetLimit(1)));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n        protected override string SelectPrimaryKeyCommandText " +
                    "\r\n        { \r\n            get { return \"SELECT ");
            
            #line 316 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.GetTop(1)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 316 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(primaryKeyName));
            
            #line default
            #line hidden
            this.Write(" FROM ");
            
            #line 316 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 316 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uniqueKeyExpression));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 316 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FastDataOptions.Instance.GetLimit(1)));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n         }\r\n\r\n        protected override string DetectChangesCommandText \r\n" +
                    "        { \r\n            get { return \"SELECT COUNT(1) FROM ");
            
            #line 321 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 321 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            var changesColumn = FastDataOptions.Instance.TypeInfoLoader.GetChangesDetectionColumnName(type);
            var changesParam = FastDataOptions.Instance.ParameterSqlPrefix + "ChangesColumnValue";    
            
            
            #line default
            #line hidden
            
            #line 324 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(changesColumn + ">" + changesParam));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n        protected override string CountCommandText\r\n        { " +
                    "\r\n            get { return \"SELECT COUNT(1) FROM ");
            
            #line 329 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n\r\n\t\tprotected override string TableName\r\n        { \r\n           " +
                    " get { return \"");
            
            #line 334 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("\"; }\r\n        }\r\n                                    \r\n        protected override" +
                    " string[] UniqueKeyNames \r\n        { \r\n            get { return new string[] { ");
            
            #line 339 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            
            for (var i = 0; i < uniqueKeyNames.Length; i++)
            {
                if (i > 0)
                {
                    
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 344 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

                }				
                
            
            #line default
            #line hidden
            
            #line 346 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\"" + uniqueKeyNames[i] + "\""));
            
            #line default
            #line hidden
            
            #line 346 "C:\Projetos\GitHub\FastData\FastData\TableMapTemplate.tt"

            }
            
            
            #line default
            #line hidden
            this.Write("}; }\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class TableMapTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
